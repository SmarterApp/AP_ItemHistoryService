/*
 *  Copyright 2017 Regents of the University of California.
 *
 *  Licensed under the Educational Community License, Version 2.0 (the "license");
 *  you may not use this file except in compliance with the License. You may
 *  obtain a copy of the license at
 *
 *  https://opensource.org/licenses/ECL-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestsystem.ap.ihs;

import org.opentestsystem.ap.common.assembler.AppAssembler;
import org.opentestsystem.ap.common.config.ItemBankProperties;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.client.S3BucketManager;
import org.opentestsystem.ap.common.datastore.client.S3VersionedBucketManager;
import org.opentestsystem.ap.common.datastore.repository.ItemEntityRepository;
import org.opentestsystem.ap.common.datastore.repository.ItemHistoryRepository;
import org.opentestsystem.ap.common.datastore.repository.ItemSyncRepository;
import org.opentestsystem.ap.common.datastore.repository.WorkflowStatusRepository;
import org.opentestsystem.ap.common.datastore.repository.WorkflowStatusTransitionRepository;
import org.opentestsystem.ap.common.gitlab.GitLabItemManager;
import org.opentestsystem.ap.common.history.ItemHistoryEventHandler;
import org.opentestsystem.ap.common.management.ItemManagerEventConsumer;
import org.opentestsystem.ap.common.repository.ItemRepository;
import org.opentestsystem.ap.common.saaif.item.AssociatedStimulusSupplier;
import org.opentestsystem.ap.common.saaif.transformer.TransformerFactory;
import org.opentestsystem.ap.common.task.ItemCleanupTask;
import org.opentestsystem.ap.common.task.TaskProperties;
import org.opentestsystem.ap.common.util.ImageGenerator;
import org.opentestsystem.rdw.common.status.StatusConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Import;
import org.springframework.scheduling.annotation.EnableScheduling;

/**
 * The configuration to use when syncing the data store to the item bank.
 */
@EnableScheduling
@Configuration
@Import(StatusConfiguration.class)
public class ItemHistoryServiceConfiguration {

    private final ItemBankProperties itemBankProperties;

    public ItemHistoryServiceConfiguration(ItemBankProperties itemBankProperties) {
        this.itemBankProperties = itemBankProperties;
    }

    // ------------------------------------------------------------------------

    @Bean
    @ConditionalOnMissingBean
    public S3BucketManager s3BucketManager() {
        return new S3BucketManager(itemBankProperties);
    }

    @Bean
    @ConditionalOnMissingBean
    public S3VersionedBucketManager s3VersionedBucketManager() {
        return new S3VersionedBucketManager(itemBankProperties);
    }

    @Bean
    @ConditionalOnMissingBean
    public DataStoreUtility dataStoreUtility() {
        return new DataStoreUtility();
    }

    @Bean
    @ConditionalOnMissingBean
    public DataStoreAttachmentManager dataStoreAttachmentManager(S3BucketManager s3BucketManager,
                                                                 S3VersionedBucketManager s3VersionedBucketManager,
                                                                 DataStoreUtility dataStoreUtility) {
        return new DataStoreAttachmentManager(
            this.itemBankProperties,
            s3BucketManager,
            s3VersionedBucketManager,
            dataStoreUtility);
    }

    @Bean
    @ConditionalOnMissingBean
    public DataStoreDataManager dataStoreDataManager(ItemEntityRepository itemEntityRepository,
                                                     WorkflowStatusRepository workflowStatusRepository,
                                                     WorkflowStatusTransitionRepository workflowStatusTransitionRepository,
                                                     ItemSyncRepository itemSyncRepository,
                                                     ItemHistoryRepository itemHistoryRepository) {
        return new DataStoreDataManager(
            this.itemBankProperties,
            itemEntityRepository,
            workflowStatusRepository,
            workflowStatusTransitionRepository,
            itemSyncRepository,
            itemHistoryRepository);
    }

    @Bean
    @ConditionalOnMissingBean
    public GitLabItemManager gitLabManager(ItemRepository itemRepository) {
        return new GitLabItemManager(this.itemBankProperties, itemRepository);
    }

    @Bean
    @ConditionalOnMissingBean
    public ItemHistoryEventHandler itemHistoryEventHandler(DataStoreDataManager dataStoreDataManager,
                                                           DataStoreAttachmentManager dataStoreAttachmentManager,
                                                           DataStoreUtility dataStoreUtility,
                                                           TransformerFactory transformerFactory,
                                                           ImageGenerator imageGenerator,
                                                           AppAssembler appAssembler) {
        return new ItemHistoryEventHandler(
            this.itemBankProperties,
            dataStoreDataManager,
            dataStoreAttachmentManager,
            dataStoreUtility,
            transformerFactory,
            imageGenerator,
            appAssembler
        );
    }

    @Bean
    @ConditionalOnMissingBean
    public ItemManagerEventConsumer itemManagerEventConsumer(ItemHistoryEventHandler eventHandler) {
        return new ItemManagerEventConsumer(eventHandler);
    }

    @Bean
    @ConditionalOnMissingBean
    public ItemCleanupTask itemCleanupTask(TaskProperties taskProperties) {
        return new ItemCleanupTask(taskProperties, this.itemBankProperties);
    }

    @Bean
    @ConditionalOnMissingBean
    public AssociatedStimulusSupplier associatedStimulusSupplier(DataStoreDataManager itemManager) {
        return new AssociatedStimulusSupplier(itemManager);
    }
}
