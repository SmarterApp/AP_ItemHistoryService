/*
 *  Copyright 2017 Regents of the University of California.
 *
 *  Licensed under the Educational Community License, Version 2.0 (the "license");
 *  you may not use this file except in compliance with the License. You may
 *  obtain a copy of the license at
 *
 *  https://opensource.org/licenses/ECL-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestsystem.ap.ihs;

import org.opentestsystem.ap.common.config.ItemBankProperties;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.client.AmazonClient;
import org.opentestsystem.ap.common.datastore.repository.ItemEntityRepository;
import org.opentestsystem.ap.common.datastore.repository.ItemSyncRepository;
import org.opentestsystem.ap.common.datastore.repository.WorkflowStatusRepository;
import org.opentestsystem.ap.common.datastore.repository.WorkflowStatusTransitionRepository;
import org.opentestsystem.ap.common.gitlab.GitLabItemManager;
import org.opentestsystem.ap.common.management.ItemManagerEventConsumer;
import org.opentestsystem.ap.common.management.ItemManagerEventHandler;
import org.opentestsystem.ap.common.repository.ItemRepository;
import org.opentestsystem.ap.common.saaif.item.AssociatedStimulusSupplier;
import org.opentestsystem.ap.common.task.ItemCleanupTask;
import org.opentestsystem.ap.common.task.TaskProperties;
import org.opentestsystem.rdw.common.status.StatusConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Import;
import org.springframework.scheduling.annotation.EnableScheduling;

/**
 * The configuration to use when syncing the data store to the item bank.
 */
@EnableScheduling
@Configuration
@Import(StatusConfiguration.class)
public class ItemHistoryServiceConfiguration {

    private final ItemBankProperties itemBankProperties;

    public ItemHistoryServiceConfiguration(ItemBankProperties itemBankProperties) {
        this.itemBankProperties = itemBankProperties;
    }

    // ------------------------------------------------------------------------

    @Bean
    @ConditionalOnMissingBean
    public AmazonClient amazonClient() {
        return new AmazonClient(itemBankProperties);
    }

    @Bean
    @ConditionalOnMissingBean
    public DataStoreUtility dataStoreUtility() {
        return new DataStoreUtility();
    }

    @Bean
    @ConditionalOnMissingBean
    public DataStoreAttachmentManager dataStoreAttachmentManager(AmazonClient amazonClient,
                                                                 DataStoreUtility dataStoreUtility) {
        return new DataStoreAttachmentManager(amazonClient, dataStoreUtility);
    }

    @Bean
    @ConditionalOnMissingBean
    public DataStoreDataManager dataStoreDataManager(ItemEntityRepository itemEntityRepository,
                                                     WorkflowStatusRepository workflowStatusRepository,
                                                     WorkflowStatusTransitionRepository workflowStatusTransitionRepository,
                                                     ItemSyncRepository itemSyncRepository) {
        return new DataStoreDataManager(
            this.itemBankProperties,
            itemEntityRepository,
            workflowStatusRepository,
            workflowStatusTransitionRepository,
            itemSyncRepository);
    }

    @Bean
    @ConditionalOnMissingBean
    public GitLabItemManager gitLabManager(ItemRepository itemRepository) {
        return new GitLabItemManager(this.itemBankProperties, itemRepository);
    }

    @Bean
    @ConditionalOnMissingBean
    public ItemManagerEventHandler itemManagerEventHandler(GitLabItemManager gitLabItemManager,
                                                       DataStoreDataManager dataStoreDataManager,
                                                       DataStoreAttachmentManager dataStoreAttachmentManager,
                                                       DataStoreUtility dataStoreUtility) {
        return new ItemManagerEventHandler(
            this.itemBankProperties,
            gitLabItemManager,
            dataStoreDataManager,
            dataStoreAttachmentManager,
            dataStoreUtility
        );
    }

    @Bean
    @ConditionalOnMissingBean
    public ItemManagerEventConsumer itemManagerEventConsumer(ItemManagerEventHandler eventHandler) {
        return new ItemManagerEventConsumer(eventHandler);
    }

    @Bean
    @ConditionalOnMissingBean
    public ItemCleanupTask itemCleanupTask(TaskProperties taskProperties) {
        return new ItemCleanupTask(taskProperties, this.itemBankProperties);
    }

    @Bean
    @ConditionalOnMissingBean
    public AssociatedStimulusSupplier associatedStimulusSupplier(DataStoreDataManager itemManager) {
        return new AssociatedStimulusSupplier(itemManager);
    }
}
