/*
 *  Copyright 2017 Regents of the University of California.
 *
 *  Licensed under the Educational Community License, Version 2.0 (the "license");
 *  you may not use this file except in compliance with the License. You may
 *  obtain a copy of the license at
 *
 *  https://opensource.org/licenses/ECL-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package org.opentestsystem.ap.item.history;

import lombok.extern.slf4j.Slf4j;
import org.apache.commons.io.IOUtils;
import org.apache.commons.lang3.StringUtils;
import org.opentestsystem.ap.common.datastore.entity.ItemHistoryEntity;
import org.opentestsystem.ap.common.exception.ResourceNotFoundException;
import org.opentestsystem.ap.common.exception.SystemException;
import org.opentestsystem.ap.common.model.ItemHistoryCsv;
import org.opentestsystem.ap.common.model.ModelUtil;
import org.opentestsystem.ap.common.model.history.ItemHistory;
import org.opentestsystem.ap.item.history.service.ItemHistoryService;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.io.InputStream;
import java.sql.Date;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.UUID;
import java.util.stream.Collectors;


/**
 * The rest endpoint for the history service.
 */
@Slf4j
@RestController
@RequestMapping("/api/v1/items")
public class ItemHistoryApi {
    private final String FORMAT_CSV = "csv";

    private ItemHistoryService itemHistoryService;

    public ItemHistoryApi(final ItemHistoryService itemHistoryService) {
        this.itemHistoryService = itemHistoryService;
    }

    /**
     * Returns a specific history record for an item.
     *
     * @param itemId    The item to get the history for
     * @param historyId The history record to get.
     * @return ItemHistory
     * @throws ResourceNotFoundException if item not found
     */
    @GetMapping("{itemId}/history/{historyId}")
    public ItemHistory getItemByHistoryId(@PathVariable final String itemId,
                                          @PathVariable final String historyId) {
        log.info("get for item history {}, item {}", historyId, itemId);
        Optional<ItemHistoryEntity> entity = this.itemHistoryService.findItemHistoryById(UUID.fromString(historyId));

        if (!entity.isPresent() || !StringUtils.equals(itemId, entity.get().getItemId())) {
            throw new ResourceNotFoundException(
                String.format("History record %s not found for item %s", historyId, itemId)
            );
        }

        return this.toHistoryModel(entity.get());
    }

    /**
     * Returns an array of ItemHistory objects for an item
     *
     * @param itemId The item Id
     * @return The list of ItemHistory
     */
    @GetMapping("{itemId}")
    public ItemHistoryResponse getItemHistory(@PathVariable final String itemId) {
        List<ItemHistoryEntity> results = itemHistoryService.findHistoryResults(itemId);
        return new ItemHistoryResponse(results.stream().map(this::toHistoryModel).collect(Collectors.toList()));
    }

    /**
     * Returns a list of item history record for an item where the history records are flagged as supporting preview.
     *
     * @param itemId The item Id
     * @return The list of ItemHistory
     */
    @GetMapping("{itemId}/preview")
    public ItemHistoryResponse getItemHistoryThatSupportsPreview(@PathVariable final String itemId) {
        List<ItemHistoryEntity> results = itemHistoryService.findSupportsPreview(itemId);
        return new ItemHistoryResponse(results.stream().map(this::toHistoryModel).collect(Collectors.toList()));
    }

    /**
     * Returns the history of an item in CSV format
     *
     * @param itemId   The item Id
     * @param format   The format of the response
     * @param response The response in CSV format
     */
    @GetMapping("/{itemId}/versions")
    public void getItemHistory(@PathVariable final String itemId,
                               @RequestParam(value = "format") final String format,
                               final HttpServletResponse response) {
        if (!FORMAT_CSV.equals(format)) {
            throw new SystemException(String.format("Unsupported format: %s", format));
        }

        log.debug("find item csv {}", itemId);

        ModelUtil modelUtil = new ModelUtil();

        List<ItemHistoryEntity> results = itemHistoryService.findHistoryResults(itemId);

        final String csvString = modelUtil
            .mapItemHistoryCsv(results.stream().map(this::toHistoryCsvModel).collect(Collectors.toList()));

        try (final InputStream csvStream = IOUtils.toInputStream(csvString, "UTF-8")) {
            response.addHeader("Content-disposition", "attachment;filename=item-" + itemId + "-history.csv");
            response.setContentType("text/csv; charset=UTF-8");
            response.setCharacterEncoding("UTF-8");

            // prepend BOM
            IOUtils.write("\ufeff", response.getOutputStream(), "UTF-8");
            IOUtils.copy(csvStream, response.getOutputStream());
            response.flushBuffer();
        } catch (IOException e) {
            throw new SystemException("Error getting CSV for item " + itemId, e);
        }
    }

    private ItemHistory toHistoryModel(ItemHistoryEntity entity) {
        // this can be null for the began creation record as it doesn't exist in the history table
        String id = Objects.nonNull(entity.getId())
            ? entity.getId().toString()
            : StringUtils.EMPTY;

        String itemCommitId = Objects.nonNull(entity.getItemCommitId())
            ? entity.getItemCommitId().toString()
            : StringUtils.EMPTY;

        String branchCommitId = Objects.nonNull(entity.getBranchCommitId())
            ? entity.getBranchCommitId().toString()
            : StringUtils.EMPTY;

        ItemHistory model = new ItemHistory();
        model.setHistoryId(id);
        model.setItemId(entity.getItemId());
        model.setItemCommitId(itemCommitId);
        model.setBranchCommitId(branchCommitId);
        model.setContentVersionId(entity.getContentVersionId());
        model.setCommitBy(entity.getCommitBy());
        model.setCommitFullname(entity.getCommitByFullname());
        model.setCommitDate(Date.from(entity.getCommitDate()));
        model.setCommitMessage(entity.getCommitMessage());
        model.setCreatedDate(Date.from(entity.getCreatedDate()));
        model.setContentDiff(entity.getContentDiff());
        model.setSupportsPreview(entity.isSupportsPreview());

        return model;
    }

    private ItemHistoryCsv toHistoryCsvModel(ItemHistoryEntity entity) {
        ItemHistoryCsv model = new ItemHistoryCsv();
        model.setUser(entity.getCommitByFullname());
        model.setTime(Date.from(entity.getCommitDate()));
        model.setMessage(entity.getCommitMessage());
        return model;
    }
}
