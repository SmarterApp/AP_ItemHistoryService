/*
 *  Copyright 2017 Regents of the University of California.
 *
 *  Licensed under the Educational Community License, Version 2.0 (the "license");
 *  you may not use this file except in compliance with the License. You may
 *  obtain a copy of the license at
 *
 *  https://opensource.org/licenses/ECL-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package org.opentestsystem.ap.item.history;

import lombok.extern.slf4j.Slf4j;
import org.apache.commons.collections4.ListUtils;
import org.apache.commons.lang3.StringUtils;
import org.opentestsystem.ap.common.datastore.entity.ItemHistoryEntity;
import org.opentestsystem.ap.common.datastore.repository.ItemHistoryRepository;
import org.opentestsystem.ap.common.exception.ResourceNotFoundException;
import org.opentestsystem.ap.common.model.history.ItemHistory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.sql.Date;
import java.util.List;
import java.util.Objects;
import java.util.UUID;
import java.util.stream.Collectors;

/**
 * The rest endpoint for the history service.
 */
@Slf4j
@RestController
@RequestMapping("/api/v1/items")
public class ItemHistoryApi {

    private final ItemHistoryRepository itemHistoryRepository;

    @Autowired
    public ItemHistoryApi(ItemHistoryRepository itemHistoryRepository) {
        this.itemHistoryRepository = itemHistoryRepository;
    }

    /**
     * Get a specific history record for an item.
     *
     * @param itemId    The item to get the history for
     * @param historyId The history record to get.
     * @return
     */
    @GetMapping("{itemId}/history/{historyId}")
    public ItemHistory getItemByHistoryId(@PathVariable String itemId, @PathVariable String historyId) {
        log.info("get for item history {}, item {}", historyId, itemId);
        ItemHistoryEntity entity = this.itemHistoryRepository.findOne(UUID.fromString(historyId));
        this.checkNotFound(entity, itemId, historyId);
        return this.toModel(entity);
    }

    @GetMapping("{itemId}")
    public List<ItemHistory> getItemHistory(@PathVariable String itemId) {
        List<ItemHistoryEntity> results = ListUtils.emptyIfNull(this.itemHistoryRepository.findByItemId(itemId));
        return results.stream().map(this::toModel).collect(Collectors.toList());
    }

    private ItemHistory toModel(ItemHistoryEntity entity) {
        ItemHistory model = new ItemHistory();

        model.setHistoryId(entity.getId().toString());
        model.setItemId(entity.getItemId());

        model.setItemCommitId(entity.getItemCommitId().toString());
        model.setBranchCommitId(entity.getBranchCommitId().toString());
        model.setContentVersionId(entity.getContentVersionId());

        model.setCommitBy(entity.getCommitBy());
        model.setCommitDate(Date.from(entity.getCommitDate()));
        model.setCommitMessage(entity.getCommitMessage());

        model.setCreatedDate(Date.from(entity.getCreatedDate()));

        return model;
    }

    private void checkNotFound(ItemHistoryEntity entity, String itemId, String historyId) {
        if (Objects.isNull(entity) || !StringUtils.equals(itemId, entity.getItemId())) {
            throw new ResourceNotFoundException(
                String.format("History record %s not found for item %s", historyId, itemId)
            );
        }
    }
}
