package org.opentestsystem.ap.item.history;

import lombok.extern.slf4j.Slf4j;
import org.apache.commons.io.FileUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.math.NumberUtils;
import org.opentestsystem.ap.common.config.ItemBankProperties;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreSaaifContentGenerator;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.datastore.entity.ItemHistoryEntity;
import org.opentestsystem.ap.common.exception.ResourceNotFoundException;
import org.opentestsystem.ap.common.exception.SystemException;
import org.opentestsystem.ap.common.management.ItemEventHandler;
import org.opentestsystem.ap.common.management.events.ItemEvent;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.security.model.ItemBankUser;
import org.opentestsystem.ap.common.util.DiffUtil;
import org.opentestsystem.ap.common.util.RandomIdGenerator;
import org.opentestsystem.ap.common.util.StopWatchLogger;

import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Objects;
import java.util.Optional;
import java.util.UUID;

/**
 * Processes item authoring events, recording the appropriate history data associated with it.
 */
@Slf4j
public class ItemHistoryEventHandler implements ItemEventHandler {

    private final RandomIdGenerator idGenerator = new RandomIdGenerator(NumberUtils.INTEGER_ZERO, Integer.MAX_VALUE);

    private final ItemBankProperties itemBankProperties;

    private final DataStoreDataManager dataStoreDataManager;

    private final DataStoreUtility dataStoreUtility;

    private DiffUtil diffUtil;

    private final DataStoreSaaifContentGenerator dataStoreSaaifContentGenerator;

    public ItemHistoryEventHandler(ItemBankProperties itemBankProperties,
                                   DataStoreDataManager dataStoreDataManager,
                                   DataStoreUtility dataStoreUtility,
                                   final DataStoreSaaifContentGenerator dataStoreSaaifContentGenerator) {
        this.itemBankProperties = itemBankProperties;
        this.dataStoreDataManager = dataStoreDataManager;
        this.dataStoreUtility = dataStoreUtility;
        this.dataStoreSaaifContentGenerator = dataStoreSaaifContentGenerator;
        this.diffUtil = new DiffUtil(Paths.get(this.itemBankProperties.getLocalBaseDir()));
    }

    /**
     * Handles all item events.
     *
     * @param itemEvent the {@link ItemEvent} with the item change
     */
    public void onItemEvent(ItemEvent itemEvent) {
        StopWatchLogger watch = StopWatchLogger.start();
        String eventType = itemEvent.getType();
        switch (eventType) {
            case ItemEvent.TYPE_COMMIT:
            case ItemEvent.TYPE_PATCH:
                ItemEntity masterCommit = this.dataStoreDataManager.findItemById(itemEvent.getMasterCommitId());
                if (!masterCommit.isBeingEdited()) {
                    log.info("[HISTORY] {} - item {} | master commit {} | branch commit {} | username {}",
                        StringUtils.upperCase(eventType),
                        masterCommit.getItemId(),
                        itemEvent.getMasterCommitId(),
                        itemEvent.getBranchCommitId(),
                        itemEvent.getUser().getUserName());
                    // commit and patch are the same
                    this.saveHistoryRecord(itemEvent, masterCommit);
                } else {
                    log.info("[HISTORY] SKIP {} - item {} is being edited | master commit {} username {}",
                        StringUtils.upperCase(eventType),
                        masterCommit.getItemId(),
                        itemEvent.getMasterCommitId(),
                        itemEvent.getUser().getUserName());
                }
                break;
            case ItemEvent.TYPE_CREATE:
            case ItemEvent.TYPE_DELETE:
                log.debug("[HISTORY] {} [ignore] - item {}", eventType.toUpperCase(), itemEvent.getItemId());
                break;
            default:
                log.warn("[HISTORY] Unknown item event type " + eventType + ", item " + itemEvent.getItemId());
                break;
        }
        watch.stop(log, "[HISTORY] " + StringUtils.upperCase(eventType));
    }

    // ------------------------------------------------------------------------

    /**
     * This is the main method for saving the history record for a commit or patch event.  The item's attachments are
     * downloaded and the SAAIF is generated.  The generated SAAIF files and attachments are zipped and saved to S3.  S3
     * gives us a version ID which we use to save on the item history record.
     *
     * @param event      The event data.
     * @param itemEntity The item record to save a history record for.
     */
    private void saveHistoryRecord(ItemEvent event, ItemEntity itemEntity) {
        ItemBankUser user = event.getUser();

        Item item = this.dataStoreUtility.cloneItemJson(itemEntity.getItemJson());

        Path itemFolder = Paths.get(itemBankProperties.getLocalBaseDir(), idGenerator.generateTransactionId());
        dataStoreSaaifContentGenerator.generateSaaifWithAttachments(item, itemBankProperties.getBankKey(), itemEntity.getBranchName(), itemFolder);

        // Lock History for Item
        this.dataStoreDataManager.lockItemHistoryForItem(item.getId());

        // Get oldest history record
        Optional<ItemHistoryEntity> latest = this.dataStoreDataManager.findLatestItemHistory(item.getId());

        String contentDiff = null;
        if (latest.isPresent()) {
            contentDiff = this.generateDiff(itemFolder, latest.get());
        }

        this.dataStoreDataManager.saveItemHistory(
            new ItemHistoryEntity(
                item.getId(),
                UUID.fromString(event.getMasterCommitId()),
                UUID.fromString(event.getBranchCommitId()),
                "",
                user.getUserName(),
                user.getFullName(),
                itemEntity.getCreatedDate(),
                event.getComment(),
                contentDiff,
                true
            )
        );
    }

    /**
     * Generates Diff Content. Looks up the previous commit content files to compare with the files that are currently
     * in the process of being committed
     *
     * @param itemId
     * @param newCommitDir
     * @return
     */
    private String generateDiff(Path newCommitDir, ItemHistoryEntity latest) {
        Path downloadDir = null;
        try {
            if (Objects.isNull(latest)) {
                return null;
            }

            ItemEntity previousItem = dataStoreDataManager.findItemById(latest.getItemCommitId());

            if (Objects.isNull(previousItem)) {
                throw new ResourceNotFoundException(
                    "Could not find item entity for commit id " + latest.getItemCommitId());
            }

            downloadDir = Paths.get(itemBankProperties.getLocalBaseDir(), idGenerator.generateTransactionId());

            dataStoreSaaifContentGenerator
                .generateSaaifWithAttachments(previousItem.getItemJson(), itemBankProperties.getBankKey(), previousItem.getBranchName(), downloadDir);

            // generate diff content
            return this.diffUtil.generateDiff(downloadDir, newCommitDir);
        } catch (Exception ex) {
            log.error("Unable to generate diff", ex);
            throw new SystemException(ex);
        } finally {
            if (Objects.nonNull(downloadDir)) {
                FileUtils.deleteQuietly(downloadDir.toFile());
            }
        }
    }
}
