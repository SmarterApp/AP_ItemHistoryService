package org.opentestsystem.ap.item.history.service;

import com.netflix.servo.util.VisibleForTesting;
import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.collections4.ListUtils;
import org.apache.commons.lang3.StringUtils;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.datastore.entity.ItemHistoryEntity;
import org.opentestsystem.ap.common.datastore.repository.ItemEntityRepository;
import org.opentestsystem.ap.common.datastore.repository.ItemHistoryRepository;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.UUID;

@Service
public class DefaultItemHistoryService implements ItemHistoryService {
    @VisibleForTesting
    static final String BEGAN_CREATION_COMMIT_MESSAGE = "Began creation.";

    private final ItemHistoryRepository itemHistoryRepository;

    private final ItemEntityRepository itemEntityRepository;

    public DefaultItemHistoryService(final ItemHistoryRepository itemHistoryRepository,
                                     final ItemEntityRepository itemEntityRepository) {
        this.itemHistoryRepository = itemHistoryRepository;
        this.itemEntityRepository = itemEntityRepository;
    }

    @Override
    public List<ItemHistoryEntity> findHistoryResults(final String itemId) {
        ItemHistoryEntity oldestHistoryRecord = null;

        List<ItemHistoryEntity> results = this.itemHistoryRepository.findByItemId(itemId);

        if (CollectionUtils.isNotEmpty(results)) {
            // the last record in the list is the finished creating record
            oldestHistoryRecord = results.get(results.size() - 1);
        } else {
            // if the list is empty, it might be null so create a new list for only the first entry
            results = new ArrayList<>(1);
        }

        String oldestCommitMessage = Objects.nonNull(oldestHistoryRecord)
            ? oldestHistoryRecord.getCommitMessage()
            : StringUtils.EMPTY;

        // some history records might have a 'Began creation' record, if so then no need to create one
        if (!BEGAN_CREATION_COMMIT_MESSAGE.equalsIgnoreCase(oldestCommitMessage)) {
            // create a "Began creation" record
            ItemHistoryEntity beganCreationRecord = this.getBeganCreationRecord(itemId, oldestHistoryRecord);
            // put it last, meaning its the oldest
            results.add(beganCreationRecord);
        }

        return results;
    }

    @Override
    public List<ItemHistoryEntity> findSupportsPreview(final String itemId) {
        return ListUtils.emptyIfNull(this.itemHistoryRepository.findSupportsPreview(itemId));
    }

    @Override
    public Optional<ItemHistoryEntity> findItemHistoryById(final UUID itemHistoryId) {
        return Optional.ofNullable(this.itemHistoryRepository.findOne(itemHistoryId));
    }

    /**
     * Looks up the first item record in the ITEM table.  It is considered the 'began creation' record as that is the
     * commit message we use when it is generated.  The oldest record is needed to get the user's full name.  If there
     * is no oldest record then full name is null on the returned instance.
     *
     * @param itemId              The item to look up the first record for
     * @param oldestHistoryRecord The record oldest history record for the item.
     * @return The history record representing the first entry of the item in the system.
     */
    private ItemHistoryEntity getBeganCreationRecord(String itemId, ItemHistoryEntity oldestHistoryRecord) {
        // get the very first record for the item
        ItemEntity itemEntity = this.itemEntityRepository.findFirstMaster(itemId);

        // we need the full name so we use the one on the finished creating record
        // if there is no finished creating record we default to just the user's email (i.e. the createdBy)
        String createdByFullName = Objects.nonNull(oldestHistoryRecord) && StringUtils
            .equals(oldestHistoryRecord.getCommitBy(), itemEntity.getCreatedBy())
            ? oldestHistoryRecord.getCommitByFullname()
            : itemEntity.getCreatedBy();

        ItemHistoryEntity beganCreationRecord = new ItemHistoryEntity();
        beganCreationRecord.setCreatedDate(itemEntity.getCreatedDate());
        beganCreationRecord.setItemId(itemId);
        beganCreationRecord.setCommitMessage(BEGAN_CREATION_COMMIT_MESSAGE);
        beganCreationRecord.setCommitDate(itemEntity.getCreatedDate());
        beganCreationRecord.setCommitBy(itemEntity.getCreatedBy());
        beganCreationRecord.setCommitByFullname(createdByFullName);
        beganCreationRecord.setItemCommitId(itemEntity.getId());
        beganCreationRecord.setSupportsPreview(false);

        return beganCreationRecord;
    }
}
