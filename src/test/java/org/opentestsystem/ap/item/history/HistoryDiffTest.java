package org.opentestsystem.ap.item.history;

import lombok.extern.slf4j.Slf4j;
import org.apache.commons.io.FileUtils;
import org.eclipse.jgit.api.Git;
import org.eclipse.jgit.api.errors.GitAPIException;
import org.eclipse.jgit.diff.DiffFormatter;
import org.eclipse.jgit.lib.ObjectId;
import org.eclipse.jgit.lib.ObjectReader;
import org.eclipse.jgit.revwalk.RevCommit;
import org.eclipse.jgit.revwalk.RevWalk;
import org.eclipse.jgit.treewalk.AbstractTreeIterator;
import org.eclipse.jgit.treewalk.CanonicalTreeParser;
import org.junit.After;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.ap.common.exception.SystemException;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

@Slf4j
public class HistoryDiffTest {

    private Path jsonFileV1;
    private Path jsonFileV2;
    private Path aslFile1;
    private Path aslFile2;

    @Before
    public void setup() {
        this.jsonFileV1 = Paths.get(Thread.currentThread().getClass()
            .getResource("/item_200000_v1.json").getFile());
        this.jsonFileV2 = Paths.get(Thread.currentThread().getClass()
            .getResource("/item_200000_v2.json").getFile());

        this.aslFile1 = Paths.get(Thread.currentThread().getClass()
            .getResource("/item_200000_ASL_STEM.mp4").getFile());
        this.aslFile2 = Paths.get(Thread.currentThread().getClass()
            .getResource("/item_200000_ASL_STEM.webm").getFile());
    }

    /**
     * This unit test contains the working proof of concept of using JGit to produce diff text
     *
     * @throws IOException
     * @throws GitAPIException
     */
    @Test
    public void generateDiffUsingJGit() throws IOException, GitAPIException {
        Path gitRepo = Files.createTempDirectory("gitRepo_");
        Git git = Git.init().setDirectory(gitRepo.toFile()).call();

        // Copy previous commit files
        FileUtils.copyFileToDirectory(this.jsonFileV1.toFile(), gitRepo.toFile());
        // Add and commit files
        git.add().addFilepattern(".").call();
        RevCommit oldCommit = git.commit().setMessage("Old Commit").call();

        // Simulate modifying json file by overwriting with v2 contents
        FileUtils.copyFile(this.jsonFileV2.toFile(), gitRepo.resolve("item_200000_v1.json").toFile());
        // Copy new files
        FileUtils.copyFileToDirectory(this.aslFile1.toFile(), gitRepo.toFile());
        FileUtils.copyFileToDirectory(this.aslFile2.toFile(), gitRepo.toFile());
        // Add and commit files
        git.add().addFilepattern(".").call();
        RevCommit newCommit = git.commit().setMessage("New Commit").call();

        AbstractTreeIterator oldTreeIterator = getCanonicalTreeParser(git, oldCommit);
        AbstractTreeIterator newTreeIterator = getCanonicalTreeParser(git, newCommit);

        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();

        DiffFormatter diffFormatter = new DiffFormatter(outputStream);
        diffFormatter.setRepository(git.getRepository());
        diffFormatter.setDetectRenames(true);
        diffFormatter.format(diffFormatter.scan(oldTreeIterator, newTreeIterator));
        diffFormatter.close();

        String diffText = new String(outputStream.toByteArray(), StandardCharsets.UTF_8);

        Assert.assertTrue(diffText.contains("+++ b/item_200000_ASL_STEM.mp4"));
        Assert.assertTrue(diffText.contains("+++ b/item_200000_ASL_STEM.webm"));
        Assert.assertTrue(diffText.contains("+++ b/item_200000_v1.json"));

        System.out.println(diffText);

        outputStream.close();
        git.getRepository().close();

    }

    @Test
    public void generateDiffFromDirectories() throws IOException{
        Path oldCommitDir = Files.createTempDirectory("oldCommit_");
        FileUtils.copyFile(this.jsonFileV1.toFile(), oldCommitDir.resolve("item_200000.json").toFile());

        Path newCommitDir = Files.createTempDirectory("newCommit_");
        // Simulate modifying json file by overwriting with v2 contents
        FileUtils.copyFile(this.jsonFileV2.toFile(), newCommitDir.resolve("item_200000.json").toFile());
        // Copy new files
        FileUtils.copyFileToDirectory(this.aslFile1.toFile(), newCommitDir.toFile());
        FileUtils.copyFileToDirectory(this.aslFile2.toFile(), newCommitDir.toFile());

        String diffText = generateDiff(oldCommitDir, newCommitDir);

        Assert.assertTrue(diffText.contains("+++ b/item_200000_ASL_STEM.mp4"));
        Assert.assertTrue(diffText.contains("+++ b/item_200000_ASL_STEM.webm"));
        Assert.assertTrue(diffText.contains("+++ b/item_200000.json"));

        System.out.println(diffText);

    }

    private String generateDiff(Path oldCommitDir, Path newCommitDir) {
        String diff;
        Path gitRepo;
        try {
            gitRepo = Files.createTempDirectory("gitRepo_");
            Git  git = Git.init().setDirectory(gitRepo.toFile()).call();

            // Copy, add and commit old files
            FileUtils.copyDirectory(oldCommitDir.toFile(), gitRepo.toFile());
            git.add().addFilepattern(".").call();
            RevCommit oldCommit = git.commit().setMessage("Old Commit").call();

            // Copy, add and commit new files
            FileUtils.copyDirectory(newCommitDir.toFile(), gitRepo.toFile());
            git.add().addFilepattern(".").call();
            RevCommit newCommit = git.commit().setMessage("New Commit").call();

            diff = generateDiff(git, oldCommit, newCommit);

            git.getRepository().close();

        } catch (Exception e) {
            log.error("Unable to generate diff content", e);
            throw new SystemException(e);
        }
        return diff;
    }

    private String generateDiff(Git git, RevCommit oldCommit, RevCommit newCommit) throws IOException {
        AbstractTreeIterator oldTreeIterator = getCanonicalTreeParser(git, oldCommit);
        AbstractTreeIterator newTreeIterator = getCanonicalTreeParser(git, newCommit);

        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();

        DiffFormatter diffFormatter = new DiffFormatter(outputStream);
        diffFormatter.setRepository(git.getRepository());
        diffFormatter.setDetectRenames(true);
        diffFormatter.format(diffFormatter.scan(oldTreeIterator, newTreeIterator));
        diffFormatter.close();

        String diff = new String(outputStream.toByteArray(), StandardCharsets.UTF_8);

        outputStream.close();

        return diff;
    }

    private AbstractTreeIterator getCanonicalTreeParser(Git git, ObjectId commitId) throws IOException {
        try (RevWalk walk = new RevWalk(git.getRepository())) {
            RevCommit commit = walk.parseCommit(commitId);
            ObjectId treeId = commit.getTree().getId();
            try (ObjectReader reader = git.getRepository().newObjectReader()) {
                return new CanonicalTreeParser(null, reader, treeId);
            }
        }
    }

}
