package org.opentestsystem.ap.item.history;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.ArgumentCaptor;
import org.mockito.Captor;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.common.assembler.AppAssembler;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreSaaifContentGenerator;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.datastore.entity.ItemHistoryEntity;
import org.opentestsystem.ap.common.management.events.CommitItemEvent;
import org.opentestsystem.ap.common.management.events.ItemEvent;
import org.opentestsystem.ap.common.model.SaItem;
import org.opentestsystem.ap.common.saaif.ItemContext;
import org.opentestsystem.ap.common.saaif.transformer.ModelTransformer;
import org.opentestsystem.ap.common.saaif.transformer.TransformerFactory;
import org.opentestsystem.ap.common.util.ImageGenerator;

import java.nio.file.Path;
import java.time.Instant;
import java.util.Optional;
import java.util.UUID;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Matchers.any;
import static org.mockito.Matchers.eq;
import static org.mockito.Mockito.doNothing;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.opentestsystem.ap.common.model.ModelConstants.Section.SECTION_ASL;
import static org.opentestsystem.ap.item.history.AppTestUtil.BANK_KEY;
import static org.opentestsystem.ap.item.history.AppTestUtil.ITEM_BANK_USER;
import static org.opentestsystem.ap.item.history.AppTestUtil.ITEM_ID;

@RunWith(MockitoJUnitRunner.class)
public class ItemHistoryEventHandlerTest {

    private static final UUID MASTER_COMMIT_ID = UUID.randomUUID();

    private static final UUID BRANCH_COMMIT_ID = UUID.randomUUID();

    private static final String COMMENT = "This is a commit comment.";

    private static final String ATTACHMENTS_VERSION_ID = "attachment-version-id";

    private static final String CONTENT_VERSION_ID = "new-attachment-version-id";;

    private AppTestUtil testUtil;

    @Mock
    private DataStoreDataManager dataStoreDataManager;

    @Mock
    private DataStoreAttachmentManager dataStoreAttachmentManager;

    @Mock
    private DataStoreUtility dataStoreUtility;

    @Mock
    private TransformerFactory transformerFactory;

    @Mock
    private ImageGenerator imageGenerator;

    @Mock
    private AppAssembler appAssembler;

    @Mock
    private ModelTransformer modelTransformer;

    @Captor
    private ArgumentCaptor<ItemHistoryEntity> captor;

    @Mock
    private DataStoreSaaifContentGenerator dataStoreSaaifContentGenerator;

    private ItemHistoryEventHandler handler;

    private ItemEntity itemEntity;

    private SaItem saItem;

    private Instant createdDate;

    @Before
    public void setup() {
        this.createdDate = Instant.now();

        this.testUtil = new AppTestUtil();

        this.saItem = this.testUtil.newSaItem();

        this.itemEntity = new ItemEntity(ITEM_ID, SECTION_ASL);
        this.itemEntity.setId(MASTER_COMMIT_ID);
        this.itemEntity.setItemJson(this.saItem);
        this.itemEntity.setCreatedDate(this.createdDate);

        this.handler = new ItemHistoryEventHandler(
            testUtil.getItemBankProperties(),
            this.dataStoreDataManager,
            this.dataStoreUtility,
            dataStoreSaaifContentGenerator);


        when(this.dataStoreDataManager.findItemById(MASTER_COMMIT_ID.toString())).thenReturn(this.itemEntity);
        when(this.dataStoreUtility.cloneItemJson(this.saItem)).thenReturn(saItem);

        when(this.transformerFactory.newTransformer(this.saItem.getType(), this.imageGenerator))
            .thenReturn(this.modelTransformer);

        doNothing().when(this.modelTransformer)
            .generateSaaifFiles(eq(this.saItem), eq(BANK_KEY), any(ItemContext.class));

        when(this.dataStoreDataManager.lockItemHistoryForItem(this.saItem.getId()))
            .thenReturn(null);

        when(this.dataStoreDataManager.findLatestItemHistory(this.saItem.getId()))
            .thenReturn(Optional.empty());
    }

    @After
    public void teardown() {
        testUtil.cleanup();
    }

    @Test
    public void testOnItemEvent() {
        ItemEvent event = new CommitItemEvent(
            ITEM_BANK_USER,
            MASTER_COMMIT_ID.toString(),
            BRANCH_COMMIT_ID.toString(),
            COMMENT,
            ITEM_ID);

        this.handler.onItemEvent(event);

        verify(this.dataStoreDataManager).saveItemHistory(this.captor.capture());

        ItemHistoryEntity actual = this.captor.getValue();

        assertThat(actual.getItemId()).isEqualTo(ITEM_ID);
        assertThat(actual.getItemCommitId()).isEqualTo(MASTER_COMMIT_ID);
        assertThat(actual.getBranchCommitId()).isEqualTo(BRANCH_COMMIT_ID);
        assertThat(actual.getContentVersionId()).isEmpty();
        assertThat(actual.getCommitBy()).isEqualTo(ITEM_BANK_USER.getUserName());
        assertThat(actual.getCommitByFullname()).isEqualTo(ITEM_BANK_USER.getFullName());
        assertThat(actual.getCommitDate()).isEqualTo(this.createdDate);
        assertThat(actual.getCommitMessage()).isEqualTo(COMMENT);
    }
}
