package org.opentestsystem.ap.item.history.service;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.common.datastore.entity.ItemEntity;
import org.opentestsystem.ap.common.datastore.entity.ItemHistoryEntity;
import org.opentestsystem.ap.common.datastore.repository.ItemEntityRepository;
import org.opentestsystem.ap.common.datastore.repository.ItemHistoryRepository;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.verifyZeroInteractions;
import static org.mockito.Mockito.when;
import static org.opentestsystem.ap.item.history.service.DefaultItemHistoryService.BEGAN_CREATION_COMMIT_MESSAGE;

@RunWith(MockitoJUnitRunner.class)
public class DefaultItemHistoryServiceTest {

    @Mock
    private ItemHistoryRepository itemHistoryRepository;

    @Mock
    private ItemEntityRepository itemEntityRepository;

    private DefaultItemHistoryService itemHistoryService;

    @Before
    public void setUp() {
        itemHistoryService = new DefaultItemHistoryService(itemHistoryRepository, itemEntityRepository);
    }

    @Test
    public void shouldReturnHistoryRecordById() {
        UUID id = UUID.randomUUID();
        ItemHistoryEntity itemHistoryEntity = new ItemHistoryEntity();
        when(itemHistoryRepository.findOne(id)).thenReturn(itemHistoryEntity);

        Optional<ItemHistoryEntity> persistedEntity = itemHistoryService.findItemHistoryById(id);

        verify(itemHistoryRepository).findOne(id);

        assertThat(persistedEntity).isPresent();
        assertThat(persistedEntity.get()).isEqualTo(itemHistoryEntity);
    }

    @Test
    public void shouldReturnPreviewableHistory() {
        final String itemId = "1";
        ItemHistoryEntity itemHistoryEntity = new ItemHistoryEntity();

        when(itemHistoryRepository.findSupportsPreview("1")).thenReturn(Collections.singletonList(itemHistoryEntity));

        List<ItemHistoryEntity> histories = itemHistoryService.findSupportsPreview(itemId);

        verify(itemHistoryRepository).findSupportsPreview(itemId);

        assertThat(histories).containsExactly(itemHistoryEntity);
    }

    @Test
    public void shouldFindHistoryRecords() {
        final String itemId = "1";
        ItemHistoryEntity itemHistoryEntity = new ItemHistoryEntity();
        itemHistoryEntity.setCommitMessage(BEGAN_CREATION_COMMIT_MESSAGE);

        when(itemHistoryRepository.findByItemId(itemId)).thenReturn(Collections.singletonList(itemHistoryEntity));

        List<ItemHistoryEntity> histories = itemHistoryService.findHistoryResults(itemId);

        verifyZeroInteractions(itemEntityRepository);
        verify(itemHistoryRepository).findByItemId(itemId);

        assertThat(histories).containsExactly(itemHistoryEntity);
    }

    @Test
    public void shouldUseFirstItemEntityRecordIfHistoryRecordMissing() {
        final String itemId = "1";
        ItemHistoryEntity itemHistoryEntity = new ItemHistoryEntity();
        itemHistoryEntity.setCommitBy("test@test.com");
        itemHistoryEntity.setCommitByFullname("Test User");
        itemHistoryEntity.setCommitMessage("Some other message");

        ItemEntity itemEntity = new ItemEntity("1", "master");
        itemEntity.setCreatedBy("test@test.com");

        List<ItemHistoryEntity> entities = new ArrayList<>();
        entities.add(itemHistoryEntity);
        when(itemHistoryRepository.findByItemId(itemId)).thenReturn(entities);
        when(itemEntityRepository.findFirstMaster(itemId)).thenReturn(itemEntity);

        List<ItemHistoryEntity> histories = itemHistoryService.findHistoryResults(itemId);

        verify(itemHistoryRepository).findByItemId(itemId);
        verify(itemEntityRepository).findFirstMaster(itemId);

        assertThat(histories).hasSize(2);

        assertThat(histories.get(0).getCommitMessage()).isEqualTo("Some other message");

        ItemHistoryEntity create = histories.get(1);

        assertThat(create.getCommitMessage()).isEqualTo(BEGAN_CREATION_COMMIT_MESSAGE);
        assertThat(create.getCommitByFullname()).isEqualTo("Test User");
    }

    @Test
    public void shouldUseItemEntityCreatedByWhenHistoryCommitDoesNotMatch() {
        final String itemId = "1";
        ItemHistoryEntity itemHistoryEntity = new ItemHistoryEntity();
        itemHistoryEntity.setCommitBy("test@test.com");
        itemHistoryEntity.setCommitByFullname("Test User");
        itemHistoryEntity.setCommitMessage("Some other message");

        ItemEntity itemEntity = new ItemEntity("1", "master");
        itemEntity.setCreatedBy("item-migration@smarterbalanced.com");

        List<ItemHistoryEntity> entities = new ArrayList<>();
        entities.add(itemHistoryEntity);
        when(itemHistoryRepository.findByItemId(itemId)).thenReturn(entities);
        when(itemEntityRepository.findFirstMaster(itemId)).thenReturn(itemEntity);

        List<ItemHistoryEntity> histories = itemHistoryService.findHistoryResults(itemId);

        verify(itemHistoryRepository).findByItemId(itemId);
        verify(itemEntityRepository).findFirstMaster(itemId);

        assertThat(histories).hasSize(2);

        ItemHistoryEntity historyRecord = histories.get(0);

        assertThat(historyRecord.getCommitMessage()).isEqualTo("Some other message");
        assertThat(historyRecord.getCommitBy()).isEqualTo("test@test.com");
        assertThat(historyRecord.getCommitByFullname()).isEqualTo("Test User");
        assertThat(historyRecord.getCommitMessage()).isEqualTo("Some other message");

        ItemHistoryEntity create = histories.get(1);

        assertThat(create.getCommitMessage()).isEqualTo(BEGAN_CREATION_COMMIT_MESSAGE);
        assertThat(create.getCommitByFullname()).isEqualTo("item-migration@smarterbalanced.com");
        assertThat(create.getCommitBy()).isEqualTo("item-migration@smarterbalanced.com");
    }
}